// Code generated by mockery v2.14.0. DO NOT EDIT.

package burrito

import mock "github.com/stretchr/testify/mock"

// MockIBurritoOperations is an autogenerated mock type for the IBurritoOperations type
type MockIBurritoOperations struct {
	mock.Mock
}

// Find provides a mock function with given fields: _a0
func (_m *MockIBurritoOperations) Find(_a0 *Query) GetManyOp {
	ret := _m.Called(_a0)

	var r0 GetManyOp
	if rf, ok := ret.Get(0).(func(*Query) GetManyOp); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(GetManyOp)
		}
	}

	return r0
}

// FindOne provides a mock function with given fields: _a0
func (_m *MockIBurritoOperations) FindOne(_a0 *Query) GetOneOp {
	ret := _m.Called(_a0)

	var r0 GetOneOp
	if rf, ok := ret.Get(0).(func(*Query) GetOneOp); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(GetOneOp)
		}
	}

	return r0
}

// Update provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockIBurritoOperations) Update(_a0 *BurritoEntity, _a1 *Query, _a2 *UpdateValues) UpdateOp {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 UpdateOp
	if rf, ok := ret.Get(0).(func(*BurritoEntity, *Query, *UpdateValues) UpdateOp); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(UpdateOp)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockIBurritoOperations interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockIBurritoOperations creates a new instance of MockIBurritoOperations. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockIBurritoOperations(t mockConstructorTestingTNewMockIBurritoOperations) *MockIBurritoOperations {
	mock := &MockIBurritoOperations{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
